#!/usr/bin/env python
import zipfile
import hashlib
from datetime import datetime
from androguard.core.bytecodes.apk import APK,AXMLPrinter
from core.interfaces.imalware import IMalware
class ApkMalware(APK,IMalware):
    def get_path(self):
        return self.get_filename()
    
    def get_hash(self):
        return 'hash'

    def get_date(self):
        manifest = self.zip.getinfo('AndroidManifest.xml')
        date = manifest.date_time
        return date
        
class APKFile(object):
    def __init__(self,filename):
        self.filename = filename
        self.zip = zipfile.ZipFile(filename,'r')
        self.date = self.zip.getinfo('AndroidManifest.xml').date_time
        self.xmlfile = AXMLPrinter(self.zip.read('AndroidManifest.xml')).get_xml()
        self.zip.close()
        self.hash1 = self.create_sha1(filename)
        self.md5 = self.create_md5(filename)
        # self.apk = APK(self.filename)
        
    def get_filename(self):
        return self.filename

    def get_apk(self):
        return APK(self.filename)
        
    def get_manifest_xml(self):
        return self.xmlfile
        
    def get_date(self):
        # return self.date
        return datetime(*self.date[0:6])
                         
    def create_sha1(self,fullpath):
        sha1 = hashlib.sha1()
        f = open(fullpath,'rb')
        try:
            sha1.update(f.read())
        finally:
            f.close()
        return sha1.hexdigest()

    def get_sha1(self):
        return self.hash1
        
    def create_md5(self,fullpath):
        md5 = hashlib.md5()
        f = open(fullpath,'rb')
        try:
            md5.update(f.read())
        finally:
            f.close()
        return md5.hexdigest()

    def get_md5(self):
        return self.md5

    def __str__(self):
        return '%s' %str(self.md5) 
        
    def __eq__(self,other):
        return self.md5 == other.md5
        
    def __ne__(self,other):
        return self.md5 != other.md5x